JFrame - main application window

JPanel - stores the table and buttons
can use gridbaglayout/border layout for first screen

App Window Layout: 3 screens, cardlayout to manage multiple screens within the same JFrame

Table should be in center of the window 

Jbuttons should be on the bottom of table in a row 

* Can implement JScrollPane to accomodate a lot of tasks

Action listeners will carry out the various table button functions



User Inputs: 
    1. Store task as a string 
    1. Task Category as a string
    2. Task Due Date as a string

Data Storage = txt files

Sorting Tasks by DATE:
    - create sortTasksbyDate function
    - first use collections.sort to sort task into alphabetical order

        * then use comparator to sort arraylist by acending if "ascending" ButtonListener is pressed, and descending if "descending" ButtonListener is Pressed.

    - create sortTasksbyCategory function





ADDING TASKS:

taskmanager.addTask("Apply For Job", LocalDate.of(2025,4,20), 1)




CODE TO SORT TABLE ITEMS BY THE NEAREST DUE DATE:

taskList = new ArrayList<>();
sortTasksByDate(taskList);


private static void sortTasksByDate(List<String> dateList) {

    public int compare(String date1, String date2) {
        try {
            return date1.compareTo(date2)
        } catch(Exception e) {
            e.printStackTrace;
        }
    }
}


CODE TO SORT TABLE ITEMS MY OLDEST DUE DATE:



private static void sortTasksByDate(ArrayList<String> taskList) {
try  {
	String nearestDate = “”;
	Collections.sort(taskList); // sort by alphabetical order
	// compare date of task 1 with date of task 2
for (int i=0; i < taskList.size(); i++) {
	// if second task has a nearer due date
	if (taskList[ i ][ 2 ].compareTo(taskList[ i + 1][2] ))  > 0 ) {
		// second task becomes first task
		TaskList[ i + 1 ] =  nearestDate;
		// first task becomes second task 
		TaskList[ i ] = taskList [ i + 1];
	// if first task has a nearer due date
	} else if  (taskList[ i ][ 2 ].compareTo(taskList[ i + 1][2] ))  < 0 ){
		// first task is nearest task
		TaskList[ i ] = nearestDate;
	// if due dates are equal
	} else if (taskList[ i ][ 2 ].compareTo(taskList[ i + 1][2] ))  == 0 ) {
		// compare names 
		If (taskList[ i ][ 0 ].compareTo(taskList[ i + 1][0] ))  > 0 ) {
		TaskList[ i + 1 ] =  nearestDate;
		TaskList[ i ] = taskList [ i + 1];
		} else if ( taskList[ i ][ 0 ].compareTo(taskList[ i + 1][0] ))  < 0 ) {
			TaskList[ i ] = nearestDate;
		} else {
		// just default to original order
		taskList[i] = nearestDate;
		}

	}

} catch(Exception e) {
            e.printStackTrace(System.out);
}
